int main() {}

/*
### Software Life Cycle ###

# Problem Analysis & Requirements Deduction
문제 분석을 통한 목표 설정

Software Engineering
프로그램의 디자인, 생산, 유지에 대한 원초적 접근
일정 시간 및 예산을 통해 작동 및 재사용 가능하게 만들어야 한다

Tool
Software Engineering을 위해 사용하는 도구
hardware - 컴퓨터 및 주변기기
software - 운영체제, 에디터, 컴파일러, 디버거
ideaware - 능지

# Specification
시스템(프로그램)의 역할 및 동작만을 문서화한 것 (just what)

# Design 
시스템의 구조 및 구성 요소, 작동 방식 구상 ex) CRC Cards

Abstraction
관찰자의 관점 기준으로 시스템의 필요한 디테일들을 표현한 모델

Algorithm
문제 해결법을 불연속 단계로 나타낸 논리적 순서

Information Hiding
시스템의 다른 세부 정보(디테일)의 접근을 제어하기 위한 행동 ex) private

Stepwise Refinement
문제의 단계적 접근 (프로그램의 세분화)

Procedural Code vs Object-Oriented Program

# Implementation
코드 작성

# Test & Verification
검증 및 평가

Verification
동작을 제대로 구현하였는가? (specification 충실도)
Validation
옳은 목표에 도달하였는가? (requirement 충실도)

오류 제어
Robustness
오류에 대한 대처 능력. 작동 유지 능력.
Precondition
연산 및 함수에 대한 가정
Postcondition
연산 및 함수의 예상되는 결과

# Delivery & Operation & Maintenance
배포 및 유지 보수
*/